openapi: 3.0.1
info:
  title: Feedback API
  description: API documentation for the Feedback service
  version: 0.0.38
servers:
- url: http://localhost:8080
  description: Generated server url
security:
- bearerAuth: []
paths:
  /event/{eventId}:
    put:
      tags:
      - Events
      operationId: updateEvent
      parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagerEventDto'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
      - Events
      operationId: deleteEvent
      parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /event/resetNewFeedback/{eventId}:
    put:
      tags:
      - Events
      summary: Called when a manager navigates to event so new feedback is reset
      operationId: resetNewFeedback
      parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /account:
    put:
      tags:
      - Account
      operationId: modifyAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyAccountInput'
        required: true
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      tags:
      - Account
      operationId: createAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountInput'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionDto'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
      - Account
      operationId: deleteAccount
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /account/role:
    put:
      tags:
      - Account
      operationId: updateRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleInput'
        required: true
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /account/fcmToken:
    put:
      tags:
      - Account
      operationId: updateFcmToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetFcmTokenInput'
        required: true
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /feedback/submit:
    post:
      tags:
      - Feedback
      operationId: sendFeedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendFeedbackInput'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitFeedbackResponseDto'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /feedback/start:
    post:
      tags:
      - Feedback
      operationId: startFeedbackSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartFeedbackSessionInput'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackSessionDto'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /event:
    post:
      tags:
      - Events
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventInput'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagerEventDto'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /event/join/{pinCode}:
    post:
      tags:
      - Events
      operationId: joinEvent
      parameters:
      - name: pinCode
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantEventDto'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /admin/mockIdToken:
    post:
      tags:
      - Admin
      operationId: mockIdToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MockIdTokenRequestDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MockTokenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /session:
    get:
      tags:
      - Session
      operationId: getSession
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionDto'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
components:
  schemas:
    EventInput:
      required:
      - date
      - durationInMinutes
      - questions
      - title
      type: object
      properties:
        title:
          type: string
        agenda:
          type: string
        date:
          type: string
          format: date-time
        durationInMinutes:
          type: integer
          format: int32
        location:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionInput'
    QuestionInput:
      required:
      - feedbackType
      - questionText
      type: object
      properties:
        questionText:
          type: string
        feedbackType:
          type: string
          enum:
          - Emoji
          - Comment
          - ThumpsUpThumpsDown
          - Opinion
          - OneToTen
    FeedbackEntity:
      required:
      - feedbackType
      - id
      - isNew
      - questionId
      type: object
      properties:
        id:
          type: string
          format: uuid
        feedbackType:
          type: string
          enum:
          - Emoji
          - Comment
          - ThumpsUpThumpsDown
          - Opinion
          - OneToTen
        comment:
          type: string
        emoji:
          type: string
          enum:
          - VerySad
          - Sad
          - Happy
          - VeryHappy
        thumbsUpThumpsDown:
          type: string
          enum:
          - Up
          - Down
        opinion:
          type: string
          enum:
          - StronglyDisagree
          - Disagree
          - Neutral
          - Agree
          - StronglyAgree
          - NoOpinion
        oneToTen:
          type: integer
          format: int32
        questionId:
          type: string
          format: uuid
        participantId:
          type: string
        isNew:
          type: boolean
    FeedbackSummaryDto:
      required:
      - happyPercentage
      - sadPercentage
      - totalFeedback
      - veryHappyPercentage
      - verySadPercentage
      type: object
      properties:
        totalFeedback:
          type: integer
          format: int32
        verySadPercentage:
          type: number
          format: double
        sadPercentage:
          type: number
          format: double
        happyPercentage:
          type: number
          format: double
        veryHappyPercentage:
          type: number
          format: double
    ManagerEventDto:
      required:
      - date
      - durationInMinutes
      - id
      - newFeedbackForEvent
      - ownerInfo
      - questions
      - title
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        agenda:
          type: string
        date:
          type: string
          format: date-time
        pinCode:
          type: string
        durationInMinutes:
          type: integer
          format: int32
        location:
          type: string
        ownerInfo:
          $ref: '#/components/schemas/OwnerInfoDto'
        feedbackSummary:
          $ref: '#/components/schemas/FeedbackSummaryDto'
        questions:
          type: array
          items:
            $ref: '#/components/schemas/ManagerQuestion'
        newFeedbackForEvent:
          type: integer
          format: int32
    ManagerQuestion:
      required:
      - feedbackType
      - id
      - newFeedbackForQuestion
      - questionText
      type: object
      properties:
        id:
          type: string
          format: uuid
        questionText:
          type: string
        feedbackType:
          type: string
          enum:
          - Emoji
          - Comment
          - ThumpsUpThumpsDown
          - Opinion
          - OneToTen
        feedback:
          type: array
          items:
            $ref: '#/components/schemas/FeedbackEntity'
        feedbackSummary:
          $ref: '#/components/schemas/QuestionFeedbackSummary'
        newFeedbackForQuestion:
          type: integer
          format: int32
    OwnerInfoDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
    QuestionFeedbackSummary:
      required:
      - happyCount
      - sadCount
      - totalFeedback
      - veryHappyCount
      - verySadCount
      type: object
      properties:
        totalFeedback:
          type: integer
          format: int32
        verySadCount:
          type: integer
          format: int32
        sadCount:
          type: integer
          format: int32
        happyCount:
          type: integer
          format: int32
        veryHappyCount:
          type: integer
          format: int32
    ModifyAccountInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
    UpdateRoleInput:
      required:
      - role
      type: object
      properties:
        role:
          type: string
          enum:
          - Participant
          - Organizer
    SetFcmTokenInput:
      type: object
      properties:
        fcmToken:
          type: string
    FeedbackInput:
      required:
      - feedbackType
      - questionId
      type: object
      properties:
        comment:
          type: string
        emoji:
          type: string
          enum:
          - VerySad
          - Sad
          - Happy
          - VeryHappy
        thumbsUpThumpsDown:
          type: string
          enum:
          - Up
          - Down
        opinion:
          type: string
          enum:
          - StronglyDisagree
          - Disagree
          - Neutral
          - Agree
          - StronglyAgree
          - NoOpinion
        oneToTen:
          type: integer
          format: int32
        questionId:
          type: string
          format: uuid
        feedbackType:
          type: string
          enum:
          - Emoji
          - Comment
          - ThumpsUpThumpsDown
          - Opinion
          - OneToTen
    SendFeedbackInput:
      required:
      - feedback
      - pinCode
      type: object
      properties:
        feedback:
          type: array
          items:
            $ref: '#/components/schemas/FeedbackInput'
        pinCode:
          type: string
    ParticipantEventDto:
      required:
      - date
      - durationInMinutes
      - feedbackSubmited
      - id
      - ownerInfo
      - pinCode
      - questions
      - title
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        agenda:
          type: string
        date:
          type: string
          format: date-time
        pinCode:
          type: string
        durationInMinutes:
          type: integer
          format: int32
        location:
          type: string
        ownerInfo:
          $ref: '#/components/schemas/OwnerInfoDto'
        questions:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantQuestionDto'
        feedbackSubmited:
          type: boolean
    ParticipantQuestionDto:
      required:
      - feedbackType
      - id
      - questionText
      type: object
      properties:
        id:
          type: string
          format: uuid
        questionText:
          type: string
        feedbackType:
          type: string
          enum:
          - Emoji
          - Comment
          - ThumpsUpThumpsDown
          - Opinion
          - OneToTen
    SubmitFeedbackResponseDto:
      required:
      - event
      - shouldPresentRatingPrompt
      type: object
      properties:
        shouldPresentRatingPrompt:
          type: boolean
        event:
          $ref: '#/components/schemas/ParticipantEventDto'
    StartFeedbackSessionInput:
      required:
      - pinCode
      type: object
      properties:
        pinCode:
          type: string
    FeedbackSessionDto:
      required:
      - date
      - ownerInfo
      - questions
      - title
      type: object
      properties:
        title:
          type: string
        agenda:
          type: string
        questions:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantQuestionDto'
        ownerInfo:
          $ref: '#/components/schemas/OwnerInfoDto'
        date:
          type: string
          format: date-time
    MockIdTokenRequestDto:
      type: object
      properties:
        role:
          type: string
          enum:
          - Participant
          - Organizer
    MockTokenResponse:
      required:
      - firebaseResponse
      - token
      type: object
      properties:
        firebaseResponse:
          $ref: '#/components/schemas/SignInFirebaseResponseDto'
        token:
          type: string
    SignInFirebaseResponseDto:
      required:
      - expiresIn
      - idToken
      - refreshToken
      type: object
      properties:
        idToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: string
    CreateAccountInput:
      type: object
      properties:
        requestedRole:
          type: string
          enum:
          - Participant
          - Organizer
    AccountInfoDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
    ManagerDataDto:
      required:
      - managerEvents
      type: object
      properties:
        managerEvents:
          type: array
          items:
            $ref: '#/components/schemas/ManagerEventDto'
    SessionDto:
      required:
      - accountInfo
      - participantEvents
      type: object
      properties:
        role:
          type: string
          enum:
          - Participant
          - Organizer
        accountInfo:
          $ref: '#/components/schemas/AccountInfoDto'
        participantEvents:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantEventDto'
        managerData:
          $ref: '#/components/schemas/ManagerDataDto'
    ApiError:
      properties:
        timestamp:
          type: string
        message:
          type: string
        domainCode:
          type: string
          enum:
          - FEEDBACK_ALREADY_SUBMITTED
          - EVENT_ALREADY_JOINED
          - CANNOT_JOIN_OWN_EVENT
          - CANNOT_GIVE_FEEDBACK_TO_SELF
        exceptionType:
          type: string
        path:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
